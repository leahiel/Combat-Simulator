:: Combat_Overlord [@combatoverlord .combat nostats] {"position":"550,575"}
/**
 * This passage will only be run once, and will be the predominant 
 * passage until combat is over. This will allow us to keep _vars 
 * until we are done with the combat. 
 */
<<script>>
    $(document).one(":passagedisplay", function() {
        /* On passage completion, initialize. */
        $("#enemyZone").wiki(Story.get("Combat_Zone").processText());
        /* And scroll into view. */
        document.getElementById("passagetitleheader").scrollIntoView();
    });

    $(document).on("mouseenter", '.playerAttack', function() {
        State.variables.audio.sfx.light_tick.play();
    });

    $(document).on("click", '.playerAttack', function() {
        State.variables.audio.sfx.light_tick.play();
    });

    $(document).on(':dialogopening', function (ev) {
        let sv = State.variables; 

        if ($(ev.target).attr('class') === "dialogCombatWon") {
            $(document).off(':dialogopening');

            sv.quest.combatOutcome = "win";
            
            if (sv.quest.afterCombatWinFunction) {
                sv.quest.afterCombatWinFunction();
            }

        } else if ($(ev.target).attr('class') === "dialogCombatLoss") {
            $(document).off(':dialogopening');

            sv.quest.combatOutcome = "loss";

            if (sv.quest.afterCombatLossFunction) {
                sv.quest.afterCombatLossFunction();
            }
        }
    });

    /**
     * This is required here. If you have anything after the 
     * `Engine.play()` call, the game recurvisely loops forever for
     * some reason.
     */
    $(document).on(':dialogclosing', function (ev) {
        let sv = State.variables;
        let loc;

        if ($(ev.target).attr('class') === "dialogCombatWon") {
            $(document).off(':dialogclosing');
            
            loc = State.variables.ci.winPassage;
            State.variables.ci = undefined;
            Engine.play(loc);
        } else if ($(ev.target).attr('class') === "dialogCombatLoss") {
            $(document).off(':dialogclosing');
            
            loc = State.variables.ci.losePassage;
            State.variables.ci = undefined;
            Engine.play(loc);
        }
    });

<</script>>

<grid id="MainCombatGrid">
    /* This is effectively the enemies' side of the "field". */
    <span id="enemyZone"></span>

    /* The "center field", if you will. */
    <span id="combatNotifications"><span class="infoNYI">NYI: The combat log goes here.</span></span>

    /**
    * This is effectively the player's side of the "field". 
    * It lets the player pick attacks, use items, etc, etc.
    */
    <span id="playerZone"></span>

    /* The options for the player. */
    <span id="targetsZone">
        <span id="notifArea"></span>

        <span id="playerAttacks"></span>

        <span id="backForward">
            <span id="back">Back</span>
            <span id="forward">Forward</span>
        </span>
    </span>
</grid>



:: Combat_Zone [.combat helper nostats] {"position":"500,650"}
/**
 * The Combat_Zone passage dictates the logic of the combat. It 
 * iterates through "ticks" of combat, which decrement all character's
 * initialization as well as update their Canvas information. It also 
 * determines whose turn it is.
 * 
 * Its contents are run at the very beginning of combat, and at the 
 * end of every Player or Enemy turn.
 */
<<script>>
let ci = State.variables.ci;

/**
 * This function is called every "tick". It decrements Combatants
 * inits and determines whose turn it is.
 */
async function processTurns(pp, ep) {
    /** Decrement init of the character, and apply buffs if applicable. */
    function decrementInits(char) {
        char.init -= (State.variables.initDecrementAmount * char.initDecrementModifier);

        for (let buff of char.buffs) {
            /* Decrement buff. If buff duration goes down a whole number, apply its effects. */
            let buffStart = Math.floor(buff.duration);
            buff.duration -= State.variables.initDecrementAmount;
            let buffEnd = Math.floor(buff.duration);

            if (buffStart > buffEnd) {
                buff.perInit(char);
            }

            /* Remove expired buffs. */
            if (buff.duration < 0) {
                char.buffs = char.buffs.filter(function(value) { return value !== buff;});
                char.reform();
                setup.COM.determineIfCanvas(char);
            }
        }
    }

    let activeCharacter = null;

    /* Determine if all characters in pp are dead. */
    let ppdead = true;
    for (let char of ci.pp) {
        if (char.health > 0) {
            ppdead = false;
            break;
        }
    }

    /* Determine if all characters in ep are dead. */
    let epdead = true;
    for (let char of ci.ep) {
        if (char.health > 0) {
            epdead = false;
            break;
        }
    }

    /* Show Reward Dialog if all Combatants on a side are dead. */
    /* TODO: This should also check for special conditions set in CI. */
    if (ppdead) {
        /* You lost. */
        setup.COM.drawCombat();
        $("#notifArea").empty().wiki("You Lost!");

        Dialog.setup(`You Lost!`, "dialogCombatLoss");
        Dialog.wiki(Story.get(`Dialog_Lose`).processText());
        Dialog.open();

        return;
    } else if (epdead) {
        /* You won. */
        setup.COM.drawCombat();
        $("#notifArea").empty().wiki("You Won!");

        Dialog.setup(`You Won!`, "dialogCombatWon");
        Dialog.wiki(Story.get(`Dialog_Win`).processText());
        Dialog.open();
        
        return;
    }

    /* Determine if we can hit backline with frontline attacks. */
    setup.COM.determineRowViabilities();
    
    /* Check if anyone has a turn available. */
    pp.forEach((char) => {
        if (char.init <= 0 && char.health > 0) {
            activeCharacter = char;
            return;
        }
    });
    if (activeCharacter === null) {
        ep.forEach((char) => {
            if (char.init <= 0 && char.health > 0) {
                activeCharacter = char;
                return;
            }
        });
    }

    /* So that we can use this value in other Twine places, notably, ::Player_Zone. */
    ci.activeCharacter = activeCharacter;

    if (activeCharacter === null) {
        /* It is no ones turn. */
        $("#notifArea").empty().removeClass().wiki("Determining Turn");

        /* Decrement inits. */
        pp.forEach((char) => {
            if (char.health > 0) {
                decrementInits(char);
            }
        });
        ep.forEach((char) => {
            if (char.health > 0) {
                decrementInits(char);
            }
        });

        setup.COM.drawCombat();
        await setup.fns.waitFor(20);
        return processTurns(pp, ep);
    } else if (ci.pp.includes(activeCharacter)) {
        /* Player Turn */
        $("#notifArea").empty().removeClass().addClass("playerTurn").wiki(`${activeCharacter.name}'s Turn`);

        setup.COM.drawCombat();
        /* setup.COM.drawCombat() updates #playerZone, so the player can make a choice there. */

        /* TODO: Return a promise that ensure's an attacks animation is over before proceeding. */
        /* The player will processTurns() after clicking a button. No need to do it here. */
        return;
    } else if (ci.ep.includes(activeCharacter)) {
        /* Enemy Turn */
        $("#notifArea").empty().removeClass().addClass("enemyTurn").wiki("Enemy Turn");

        setup.COM.drawCombat();
        await setup.fns.waitFor(500);

        /* Enemy AI */
        /* Not yet fully implemented, but this should call activeCharacter.ai() when complete.  */
        setup.COM.attackRandomWithRandom(activeCharacter);

        /* TODO: Return a promise that ensure's an attacks animation is over before proceeding. */
        $("#enemyZone").wiki(Story.get("Combat_Zone").processText());
        return;
    }
};

$("#enemyZone").empty().wiki(Story.get("Combat_Zone_Main").processText());
$("#playerZone").empty().wiki(Story.get("Player_Zone").processText());

processTurns(ci.pp, ci.ep);
<</script>>



:: Combat_Zone_Main [.combat helper nostats] {"position":"500,625"}
/**
 * The HTML elements of the enemies.
 */

/**
 * DESIRED: I wanted to dynamically make these elements, but they  
 * aren't created fast enough to render properly. Further research 
 * shows that it is because I would have to constantly recreate the  
 * canvas element, so if we fix that problem, we can dynamically make 
 * these elements. Unfortunately, I don't think the efficiency gain 
 * is worth the effort. 
 */
<<if $ci.ep[0]>>
    <griditem id="gitemA">
        /* TODO: Add the name to the canvas instead so that I have total control over the thing. */
        $ci.ep[0].name
        <canvas class="initBar" id="enemyA" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#enemyZone griditem#gitemA', State.variables.ci.ep[0]);
    <</script>>
<</if>>

<<if $ci.ep[1]>>
    <griditem id="gitemB">
        $ci.ep[1].name
        <canvas class="initBar" id="enemyB" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#enemyZone griditem#gitemB', State.variables.ci.ep[1]);
    <</script>>
<</if>>

<<if $ci.ep[2]>>
    <griditem id="gitemC">
        $ci.ep[2].name
        <canvas class="initBar" id="enemyC" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#enemyZone griditem#gitemC', State.variables.ci.ep[2]);
    <</script>>
<</if>>

<<if $ci.ep[3]>>
    <griditem id="gitemD">
        $ci.ep[3].name
        <canvas class="initBar" id="enemyD" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#enemyZone griditem#gitemD', State.variables.ci.ep[3]);
    <</script>>
<</if>>

<<if $ci.ep[4]>>
    <griditem id="gitemE">
        $ci.ep[4].name
        <canvas class="initBar" id="enemyE" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#enemyZone griditem#gitemE', State.variables.ci.ep[4]);
    <</script>>
<</if>>



:: Player_Zone [.combat helper nostats] {"position":"600,625"}
/* HTML elements of the player characters. */

/**
 * DESIRED: I wanted to dynamically make these elements, but they  
 * aren't created fast enough to render properly. Further research 
 * shows that it is because I would have to constantly recreate the  
 * canvas element, so if we fix that problem, we can dynamically make 
 * these elements. Unfortunately, I don't think the efficiency gain 
 * is worth the effort. 
 */
<<if $ci.pp[0]>>
    <griditem id="gitemA">
        $ci.pp[0].name
        <canvas class="initBar" id="playerA" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#playerZone griditem#gitemA', State.variables.ci.pp[0]);
    <</script>>
<</if>>

<<if $ci.pp[1]>>
    <griditem id="gitemB">
        $ci.pp[1].name
        <canvas class="initBar" id="playerB" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#playerZone griditem#gitemB', State.variables.ci.pp[1]);
    <</script>>
<</if>>

<<if $ci.pp[2]>>
    <griditem id="gitemC">
        $ci.pp[2].name
        <canvas class="initBar" id="playerC" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#playerZone griditem#gitemC', State.variables.ci.pp[2]);
    <</script>>
<</if>>

<<if $ci.pp[3]>>
    <griditem id="gitemD">
        $ci.pp[3].name
        <canvas class="initBar" id="playerD" width="2048" height="384"></canvas>
    </griditem>

    <<script>>
        setup.fns.displayToInfoScreenOnMouseover('#playerZone griditem#gitemD', State.variables.ci.pp[3]);
    <</script>>
<</if>>