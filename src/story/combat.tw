:: Combat_Overlord [@combatoverlord .combat nostats]
/* This passage will only be run once, and will be the predominant passage until combat is over. This will allow us to keep _vars until we are done with the combat. */
/* <<set _pc to new setup.COM.Combatant(State.variables.Player.Derived)>> */
<<set _pc to {health: 14, healthMax: 14, init: 63, attacks: [setup.COM.attacks.stab]}>> /* NOTE TESTING ONLY */
<<set _pp to [_pc]>> /* For future compatibility, if there are more than one pc. This will NOT be used in this story. */
<<script>>
State.temporary.ep = [];
for (let uninitEnemy of State.variables.ep) {
    State.temporary.ep.push(new setup.COM.Combatant(setup.COM.monsters[uninitEnemy]));
}
<</script>>


/* TODO: These two below should actaully be handled as story variables, before this passage is called. */
<<set _win to "victorypassagename">>
<<set _lose to "losepassagename">>
<<script>>
    $(document).one(":passagedisplay", function() {
        $("#combatZone").wiki(Story.get("Combat_Zone").processText());
    });
<</script>>

<span id="nextCombatZone"></span>
<span id="combatZone">
/* This area will be replaced multiple times as the fight progresses. */
/* TODO: Show the statisitical details of all combatants. */
</span>
<br>

<span id="notifArea" style="font-size:2em"></span><br>
<br>

<span id="nextPlayerOptions"></span>
<span id="playerOptions">
/* This area will change depending on whose turn it is. It will let the player pick attacks, use items, etc, etc. */
/* It gets set in Combat_Zone */
</span>
<br>



:: Combat_Zone [.combat .helper nostats]
<<script>>
$("#combatZone").empty().wiki(Story.get("Combat_Zone_Main").processText());
function drawCombat() {
    if (State.temporary.ep[0]) {
        $('#gitemA progress.healthBar').attr({value: State.temporary.ep[0].health, max: State.temporary.ep[0].healthMax});
        updateInitBar(State.temporary.ep[0], "enemy", $('canvas.initBar#enemyA'));
    }
    if (State.temporary.ep[1]) {
        $('#gitemB progress.healthBar').attr({value: State.temporary.ep[1].health, max: State.temporary.ep[1].healthMax});
        updateInitBar(State.temporary.ep[1], "enemy", $('canvas.initBar#enemyB'));
    }
    if (State.temporary.ep[2]) {
        $('#gitemC progress.healthBar').attr({value: State.temporary.ep[2].health, max: State.temporary.ep[2].healthMax});
        updateInitBar(State.temporary.ep[2], "enemy", $('canvas.initBar#enemyC'));
    }
    if (State.temporary.ep[3]) {
        $('#gitemD progress.healthBar').attr({value: State.temporary.ep[3].health, max: State.temporary.ep[3].healthMax});
        updateInitBar(State.temporary.ep[3], "enemy", $('canvas.initBar#enemyD'));
    }
    if (State.temporary.ep[4]) {
        $('#gitemE progress.healthBar').attr({value: State.temporary.ep[4].health, max: State.temporary.ep[4].healthMax});
        updateInitBar(State.temporary.ep[4], "enemy", $('canvas.initBar#enemyE'));
    }
    if (State.temporary.pp[0]) {
        $('#gitemA progress.healthBar').attr({value: State.temporary.pp[0].health, max: State.temporary.pp[0].healthMax});
        updateInitBar(State.temporary.pp[0], "player", $('canvas.initBar#playerA'));
    }
    
    /*
    $("#nextPlayerOptions").wiki(Story.get("Player_Options").processText());
    $("#nextPlayerOptions").clone().appendTo($("#playerOptions").empty());
    $("#nextPlayerOptions").empty();
    */
    /* TODO: In order for player canvas to work, I need to not refresh everything, as below line does, but rather just refresh the specific things I need: HP and Attacks */
    $("#playerOptions").empty().wiki(Story.get("Player_Options").processText())
    
};

function updateInitBar(char, ally, initBarElement) {
    /* Here's the documentation for jCanvas. 
    Present me, please say thank you to past me for having forethought for once:
    https://projects.calebevans.me/jcanvas/docs/ 
    */

    initBarElement.clearCanvas();
    /* The rhombus. Yellow if no one has a turn, red if enemy, green if ally. */
    let rhombusimg = "";
    if (ally === "player" && char.init <= 0) {
        rhombusimg = "src/assets/img/png/turn_icon_pl.png";
    } else if (ally === "enemy" && char.init <= 0) {
        rhombusimg = "src/assets/img/png/turn_icon_en.png";
    } else {
        rhombusimg ="src/assets/img/png/turn_icon.png";
    }
    
    initBarElement.drawImage({
        source: rhombusimg,
        x: 192, y: 192,
        width: 384,
        height: 384,
    });


    /* The left most starting position of the horizontal line. */
    let horiBarXPos = 432;

    /* The horizontal line. */
    initBarElement.drawLine({
        strokeStyle: '#FFFF00',
        strokeWidth: 10,
        rounded: true,
        x1: horiBarXPos, y1: 256,
        x2: 2000, y2: 256,
    });

    /* Set init icon img. */
    let iconimg = "";
    if (ally === "player") {
        iconimg = "src/assets/img/png/init_icon_pl.png";
    } else if (ally === "enemy") {
        iconimg = "src/assets/img/png/init_icon_en.png";
    }

    /* Draw init icon. */
    if (char.health > 0) {
        let xpos = Math.min(char.init * 8 + horiBarXPos, 2000);

        initBarElement.drawImage({
            source: iconimg,
            x: xpos, y: 230,
            width: 36,
            height: 48,
        });
    }

};

async function processTurns(pp, ep) {
    function waitFor(ms) {
        return new Promise(resolve => {
            setTimeout(() => { resolve('') }, ms);
        });
    };

    let activeCharacter = null;

    /* Check if anyone has a turn available. */
    pp.forEach((char) => {
        if (char.init <= 0 && char.health > 0) {
            activeCharacter = char;
            return;
        }
    });
    if (activeCharacter === null) {
        ep.forEach((char) => {
            if (char.init <= 0 && char.health > 0) {
                activeCharacter = char;
                return;
            }
        });
    }

    State.temporary.turn = activeCharacter;

    if (activeCharacter === null) {
        /* It is no ones turn. */
        $("#notifArea").empty().wiki("Determining Turn");

        /* Decrement inits. */
        pp.forEach((char) => {
            char.init -= .25;
        });
        ep.forEach((char) => {
            char.init -= .25;
        });

        
        drawCombat();
        
        await waitFor(10); 
        return processTurns(pp, ep);

    } else if (State.temporary.pp.includes(activeCharacter)) {
        /* Player Turn */
        $("#notifArea").empty().wiki("Player Turn");

        drawCombat();
        
        /* The player will processTurns() after clicking a button. No need to do it here. */
        return;
    } else if (State.temporary.ep.includes(activeCharacter)) {
        /* Enemy Turn */
        $("#notifArea").empty().wiki("Enemy Turn");

        drawCombat();

        /* TODO: Enemy AI here */
        await waitFor(600);

        /* setup.COM.attackCalculations(ep[0].attacks[0], State.temporary.ep[0], State.temporary.pp); */ 

        /* DELETE ONCE AI IS REAL */
        activeCharacter.init += activeCharacter.attacks[1].initRecovery;
        pp[0].health -= 3;
        return $("#combatZone").wiki(Story.get("Combat_Zone").processText());
    } else {
        console.error("Is it no one's turn, but turn didn't equal null.");
        console.error(activeCharacter);
    }
};

State.temporary.pphealth = setup.fns.assignFieldOfObjectsToArray(State.temporary.pp, "health");
State.temporary.ephealth = setup.fns.assignFieldOfObjectsToArray(State.temporary.ep, "health");

if (setup.fns.allValuesTrue(State.temporary.pphealth, function(v) {return v <= 0})) { 
	/* TODO: #notifArea displays <<ibutton>> with _lose */
    drawCombat();
    $("#notifArea").empty().wiki("YOU LOSE");

} else if (setup.fns.allValuesTrue(State.temporary.ephealth, function(v) {return v <= 0})) { 
    /* TODO: #notifArea displays <<ibutton>> with _win */
    drawCombat();
    $("#notifArea").empty().wiki("YOU WIN");

} else {
    processTurns(State.temporary.pp, State.temporary.ep);
}
<</script>>



:: Combat_Zone_Main [.combat .helper nostats]
/* I'm not adding in frontline/backline mechanics yet, but it would be good to consider them, as that can add a dimensionality to my combat. */
/* TODO: There should also be a place for notifications with the flash ui. */

<combatZoneGrid>
    /* NTS: I wanted to dynamically make these elements, but they aren't created fast enough to render properly. */
    <<if _ep[0]>>
    <griditem id="gitemA">
        _ep[0].name
        <br>Hp:
        <progress class="healthBar" sc-eval:value="_ep[0].health" sc-eval:max="_ep[0].healthMax"></progress>
        <canvas class="initBar" id="enemyA" width="2048" height="384"></canvas>
    </griditem>
    <</if>>

    <<if _ep[1]>>
    <griditem id="gitemB">
        _ep[1].name
        <br>Hp:
        <progress class="healthBar" sc-eval:value="_ep[1].health" sc-eval:max="_ep[1].healthMax"></progress>
        <canvas class="initBar" id="enemyB" width="2048" height="384"></canvas>
    </griditem>
    <</if>>

    <<if _ep[2]>>
    <griditem id="gitemC">
        _ep[2].name
        <br>Hp:
        <progress class="healthBar" sc-eval:value="_ep[2].health" sc-eval:max="_ep[2].healthMax"></progress>
        <canvas class="initBar" id="enemyC" width="2048" height="384"></canvas>
    </griditem>
    <</if>>

    <<if _ep[3]>>
    <griditem id="gitemD">
        _ep[3].name
        <br>Hp:
        <progress class="healthBar" sc-eval:value="_ep[3].health" sc-eval:max="_ep[3].healthMax"></progress>
        <canvas class="initBar" id="enemyD" width="2048" height="384"></canvas>
    </griditem>
    <</if>>

    <<if _ep[4]>>
    <griditem id="gitemE">
        _ep[4].name
        <br>Hp:
        <progress class="healthBar" sc-eval:value="_ep[4].health" sc-eval:max="_ep[4].healthMax"></progress>
        <canvas class="initBar" id="enemyE" width="2048" height="384"></canvas>
    </griditem>
    <</if>>
</combatZoneGrid>



:: Player_Options [.combat .helper nostats]
$pc_name
<br>HP: _pc.health / _pc.healthMax
<br>
<progress class="healthBar" sc-eval:value="_pc.health" sc-eval:max="_pc.healthMax"></progress>
<canvas class="initBar" id="playerA" width="2048" height="384"></canvas>
<br>
/* TODO: Show the statisitical details of all attacks. */
/* TODO: Incorporate menu into something like https://www.cssscript.com/multi-level-radial-tree-menu/ or https://codepen.io/onlyveen/pen/MVaLoX*/
<<if _turn === _pc>>
    <<for _attack range _pc.attacks>>
        <<capture _attack>>
            <<ibutton _attack.name "#PlayerAttack">>
                /* TODO for target selection: Make attack button disabled, pop up more buttons asking which enemy to attack, or otherwise make it obvious that the enemies can be clicked on to be attacked. Also show a "back" button to undo attack. */

                /* If ep[0] targetable, #gitemA class += targetable */
                /* What if there are no targetable enemies? I think we should just diable the button with a notice. */
                <<script>>
                    setup.COM.attackCalculations(State.temporary.attack, State.temporary.pc, State.temporary.ep);
                    State.temporary.pc.init += State.temporary.attack.initRecovery;
                    console.log(State.temporary.pc.init);
                    State.temporary.turn = null;
                    $("#combatZone").wiki(Story.get("Combat_Zone").processText());
                <</script>>
            <</ibutton>>
        <</capture>>
    <</for>>
<<else>>
    <<for _attack range _pc.attacks>>
        <<capture _attack>>
            <<disable>><<ibutton _attack.name "#PlayerAttack">><</ibutton>><</disable>>
        <</capture>>
    <</for>>
<</if>>
