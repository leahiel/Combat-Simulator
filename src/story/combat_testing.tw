:: Inbetween [@rest] {"position":"575,350"}
This passage exists so that you can change your party configuration and items inbetween combat instances.
<br>
I hope you're enjoying my simulator! 
<br>
<gridcontainer id="charSelect2">
	<<include "Party_Preset_Select">>
</gridcontainer>
<br>
Click a button to generate a Combat Instance.
<br>
They're roughly ordered from least difficult to most difficult.
<br>
<<button [[Gen. CI w/ Spiders|Combat_Overlord]]>>
	<<script>>
		State.variables.ci = new setup.COM.CombatInstance({
			winPassage: "Inbetween",
			losePassage: "Inbetween",
			ep: [
				"EN_BABY_SPIDER",
				"EN_MOMMY_SPIDER",
				"EN_BABY_SPIDER",
				"EN_BABY_SPIDER",
				"EN_BABY_SPIDER",
			],
		});
	<</script>>
<</button>>
<br>
<<button [[Gen. CI w/ Carbuncles|Combat_Overlord]]>>
	<<script>>
		/* Random Int between 1 and 5 */
		let int = Math.ceil(Math.random() * (5));
		let carbuncleArr = [
			"EN_CARBUNCLE",
			"EN_EMERALD_CARBUNCLE",
			"EN_OYNX_CARBUNCLE",
			"EN_RUBY_CARBUNCLE",
			"EN_SAPPHIRE_CARBUNCLE",
			"EN_TOPAZ_CARBUNCLE",
		];
		let ep = setup.fns.ranItems(int, carbuncleArr, true);

		State.variables.ci = new setup.COM.CombatInstance({
			winPassage: "Inbetween",
			losePassage: "Inbetween",
			ep: ep,
		});
	<</script>>
<</button>>
<br>
<<button [[Gen. CI w/ Fauna|Combat_Overlord]]>>
	<<script>>
		/* Random Int between 1 and 2 */
		let int = Math.ceil(Math.random() * (2));
		let ep = setup.fns.ranItems(int, ["EN_HOG"], true); /* Basically: 1 or 2 hogs? */

		State.variables.ci = new setup.COM.CombatInstance({
			winPassage: "Inbetween",
			losePassage: "Inbetween",
			ep: ep,
		});
	<</script>>
<</button>>
<br>
<<button [[Gen. CI w/ Skeletons|Combat_Overlord]]>>
	<<script>>
		/* Random Int between 1 and 5 */
		let int = Math.ceil(Math.random() * (5));
		let skeletonArr = [
			"EN_UNARMED_SKELETON",
			"EN_SPEAR_SKELETON",
			"EN_SWORDSHIELD_SKELETON",
			"EN_BOW_SKELETON",
		];
		let ep = setup.fns.ranItems(int, skeletonArr, true);

		State.variables.ci = new setup.COM.CombatInstance({
			winPassage: "Inbetween",
			losePassage: "Inbetween",
			ep: ep,
		});
	<</script>>
<</button>>
<br>
<<button [[Gen. CI w/ Ghouls|Combat_Overlord]]>>
	<<script>>
		/* Random Int between 2 and 4 */
		let int = Math.floor(Math.random() * (4 - 2 + 1) + 2);
		let skeletonArr = [
			"EN_UNARMED_SKELETON",
			"EN_SPEAR_SKELETON",
			"EN_SWORDSHIELD_SKELETON",
			"EN_BOW_SKELETON",
		];
		let ep = setup.fns.ranItems(int, skeletonArr, true);
		ep.push("EN_SAUSON_GHOUL_MASTER");

		State.variables.ci = new setup.COM.CombatInstance({
			winPassage: "Inbetween",
			losePassage: "Inbetween",
			ep: ep,
		});
	<</script>>
<</button>>
<br>
<<button [[Gen.Hardest CI|Combat_Overlord]]>>
	<<script>>
		/* Random Int between 3 and 5 */
		let int = Math.floor(Math.random() * (5 - 3 + 1) + 3);
		let skeletonArr = [
			"EN_CENTAUR_BOWMAN",
			"EN_CENTAUR_HERD_MENTOR",
			"EN_CENTAUR_WARRIOR",
			"EN_CHAOS_CENTAUR",
		];
		let ep = setup.fns.ranItems(int, skeletonArr, true);

		State.variables.ci = new setup.COM.CombatInstance({
			winPassage: "Inbetween",
			losePassage: "Inbetween",
			ep: ep,
		});
	<</script>>
<</button>>
<br>
<<button [[Gen. CI w/ Random Enemies|Combat_Overlord]]>>
	<<script>>
		/* Random Int between 1 and 5 */
		let int = Math.ceil(Math.random() * (5));

		State.variables.ci = new setup.COM.CombatInstance({
			winPassage: "Inbetween",
			losePassage: "Inbetween",
			ep: setup.fns.ranItems(int, Object.keys(setup.COM.monsters), true),
		});
	<</script>>
<</button>>



:: Party_Preset_Select [.helper nostats] {"position":"275,350"}
<<script>>
	let sv = State.variables;
	let st = State.temporary;
	let Eq = setup.COM.Equippable;
	let eq = setup.COM.equippables;
	let af = setup.COM.affixes;

	/* TODO: Make presets. */
	st.presets = {
		trickster: new setup.COM.Player({
			name: "Trickster", 
			equippables: {
				weapon: new Eq(eq.swordandshield),
				armor: new Eq(eq.leatherarmor),
				accessory: new Eq(eq.trickstersamulet),
			}
		}),
		critmonster: new setup.COM.Player({
			name: "Crit Tank", 
			equippables: {
				weapon: new Eq(eq.executioneraxe),
				armor: new Eq(eq.knightarmor),
				accessory: new Eq(eq.sharktoothamulet),
			}
		}),
		cackler: new setup.COM.Player({
			name: "Abyssal Cackler", 
			equippables: {
				weapon: new Eq(eq.abyssalspear),
				armor: new Eq(eq.priestvestiges),
				accessory: new Eq(eq.elementalistsamulet),
			}
		}),
		elementalranger: new setup.COM.Player({
			name: "Elemental Ranger", 
			equippables: {
				weapon: new Eq(eq.arcanebow),
				armor: new Eq(eq.leatherarmor),
				accessory: new Eq(eq.elementalistsamulet),
			}
		}),
		spearuser: new setup.COM.Player({
			name: "Spear User", 
			equippables: {
				weapon: new Eq(eq.nimblespear),
				armor: new Eq(eq.leatherarmor),
				accessory: new Eq(eq.elementalistsamulet),
			}
		}),
	};

	st.presets.trickster.equippables.weapon.mods = [af.WEAPON_DECREASED_INIT_RECOVERY, af.WEAPON_DECREASED_INIT_RECOVERY, af.WEAPON_DECREASED_INIT_RECOVERY];
	st.presets.trickster.equippables.armor.mods = [af.ARMOR_DECREASED_INIT_RECOVERY, af.ARMOR_DECREASED_INIT_RECOVERY];
	st.presets.trickster.equippables.accessory.mods = [af.ACCESSORY_DECREASED_INIT_RECOVERY, af.ACCESSORY_DECREASED_INIT_RECOVERY];

	st.presets.critmonster.equippables.weapon.mods = [af.WEAPON_INCREASED_CRIT_CHANCE, af.WEAPON_INCREASED_CRIT_DAMAGE];
	st.presets.critmonster.equippables.armor.mods = [
		af.ARMOR_INCREASED_ELEMENTAL_RESISTANCE, 
		af.ARMOR_INCREASED_MATERIAL_RESISTANCE_PLATE, 
		af.ARMOR_MINUS_MATERIAL_DAMAGE, 
		af.ARMOR_ADDED_HEALTH_MAX];
	st.presets.critmonster.equippables.accessory.mods = [af.ACCESSORY_INCREASED_CRIT_DAMAGE, af.ACCESSORY_INCREASED_CRIT_DAMAGE];

	st.presets.cackler.equippables.weapon.mods = [af.WEAPON_INCREASED_LIGHTNING_DAMAGE, af.WEAPON_INCREASED_AETHER_DAMAGE];
	st.presets.cackler.equippables.armor.mods = [af.ARMOR_INCREASED_ELEMENTAL_RESISTANCE, af.ARMOR_INCREASED_ELEMENTAL_RESISTANCE, af.ARMOR_INCREASED_OCCULT_RESISTANCE];
	st.presets.cackler.equippables.accessory.mods = [af.ACCESSORY_MINUS_INIT_START, af.ACCESSORY_MINUS_INIT_START];

	st.presets.elementalranger.equippables.weapon.mods = [af.WEAPON_INCREASED_FIRE_DAMAGE, af.WEAPON_INCREASED_FROST_DAMAGE, af.WEAPON_INCREASED_LIGHTNING_DAMAGE, af.WEAPON_INCREASED_CRIT_CHANCE];
	st.presets.elementalranger.equippables.armor.mods = [af.ARMOR_INCREASED_ELEMENTAL_RESISTANCE, af.ARMOR_INCREASED_ACTION_SPEED];
	st.presets.elementalranger.equippables.accessory.mods = [af.ACCESSORY_INCREASED_CRIT_DAMAGE, af.ACCESSORY_INCREASED_CRIT_DAMAGE];

	st.presets.spearuser.equippables.weapon.mods = [af.WEAPON_INCREASED_DEFLECT_CHANCE, af.WEAPON_INCREASED_PIERCE_DAMAGE, af.WEAPON_INCREASED_PIERCE_DAMAGE];
	st.presets.spearuser.equippables.armor.mods = [af.ARMOR_MINUS_INIT_START, af.ARMOR_DECREASED_INIT_RECOVERY];
	st.presets.spearuser.equippables.accessory.mods = [af.ARMOR_INCREASED_DEFLECT_CHANCE, af.ARMOR_INCREASED_DEFLECT_CHANCE, af.ARMOR_INCREASED_DEFLECT_CHANCE];
<</script>>

<<done>>
<<script>>
	let sv = State.variables;
	let st = State.temporary;

	function localUpdateInfoScreen() {
		sv.info.current = null;
		$('#infoScreenMiddleMenuButtons').empty();
		$('#infoScreenBottomMenuButtons').empty().wiki(Story.get("Players_Info").processText());
	}

	setup.fns.waitForElm('#lbpc select').then(() => {
		$('#lbpc select').on('change', function (event) {
			event.stopImmediatePropagation();

			sv.pc = setup.fns.cloneDeep(st.presets[sv.pcObj]);

			localUpdateInfoScreen();
		});
	});

	setup.fns.waitForElm('#lbpp select').then(() => {
		$('#lbpp select').on('change', function (event) {
			event.stopImmediatePropagation();

			if (sv.ppObj.toLowerCase() === "none") {
				sv.pp = undefined;
			} else {
				sv.pp = setup.fns.cloneDeep(st.presets[sv.ppObj]);
			}

			localUpdateInfoScreen();
		});
	});

	setup.fns.waitForElm('#lbtp1 select').then(() => {
		$('#lbtp1 select').on('change', function (event) {
			event.stopImmediatePropagation();

			if (sv.tp1Obj.toLowerCase() === "none") {
				sv.tp1 = undefined;
			} else {
				sv.tp1 = setup.fns.cloneDeep(st.presets[sv.tp1Obj]);
			}

			localUpdateInfoScreen();
		});
	});

	setup.fns.waitForElm('#lbtp2 select').then(() => {
		$('#lbtp2 select').on('change', function (event) {
			event.stopImmediatePropagation();

			if (sv.tp2Obj.toLowerCase() === "none") {
				sv.tp2 = undefined;
			} else {
				sv.tp2 = setup.fns.cloneDeep(st.presets[sv.tp2Obj]);
			}

			localUpdateInfoScreen();
		});
	});
<</script>>
<</done>>

<griditem>
	<gridtitle>Main Character</gridtitle>
	<griddescript>
		<span id="lbpc">
		<<listbox "$pcObj" autoselect>>
			<<option "Trickster" "trickster">>
			<<option "Crit Tank" "critmonster">>
			<<option "Cackler" "cackler">>
			<<option "Elemental Ranger" "elementalranger">>
			<<option "Spear User" "spearuser">>
		<</listbox>>
		</span>
	</griddescript>
</griditem>

<griditem>
	<gridtitle>Permanent Partner</gridtitle>
	<griddescript>
		<span id="lbpp">
		<<listbox "$ppObj">>
			<<option "None" autoselect>>
			<<option "Trickster" "trickster">>
			<<option "Crit Tank" "critmonster">>
			<<option "Cackler" "cackler">>
			<<option "Elemental Ranger" "elementalranger">>
			<<option "Spear User" "spearuser">>
		<</listbox>>
		</span>
	</griddescript>
</griditem>

<griditem>
	<gridtitle>Temp Partner 1</gridtitle>
	<griddescript>
		<span id="lbtp1">
		<<listbox "$tp1Obj" autoselect>>
			<<option "None">>
			<<option "Trickster" "trickster">>
			<<option "Crit Tank" "critmonster">>
			<<option "Cackler" "cackler">>
			<<option "Elemental Ranger" "elementalranger">>
			<<option "Spear User" "spearuser">>
		<</listbox>>
		</span>
	</griddescript>
</griditem>

<griditem>
	<gridtitle>Temp Partner 2</gridtitle>
	<griddescript>
		<span id="lbtp2">
		<<listbox "$tp2Obj" autoselect>>
			<<option "None">>
			<<option "Trickster" "trickster">>
			<<option "Crit Tank" "critmonster">>
			<<option "Cackler" "cackler">>
			<<option "Elemental Ranger" "elementalranger">>
			<<option "Spear User" "spearuser">>
		<</listbox>>
		</span>
	</griddescript>
</griditem>